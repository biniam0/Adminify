model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String    @default("GUEST")
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions         Session[]
  accounts         Account[]
  rooms            Room[]    @relation("OccupiedRooms")
  bookings         Booking[]
  approvedBookings Booking[] @relation("ApprovedBookings")

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GuestHouse {
  id      String         @id @default(uuid())
  name    String
  address String
  type    GuestHouseType @default(SHARED)

  images     Json // [{url, name}]
  about      About?
  feedbacks  Json? // [{ message: String, rating: Int }]
  location   Location?
  facilities String[] // [ "Free Wi-Fi", "Sea view", "Breakfast included", "Airport Shuttle", ]
  contact    Json // { phone: String, email: String }

  rooms Room[]
}

model About {
  id          String  @id @default(uuid())
  description String
  review      Review?

  guestHouse   GuestHouse @relation(fields: [guestHouseId], references: [id], onDelete: Cascade)
  guestHouseId String     @unique
}

model Review {
  id             String @id @default(uuid())
  averageRating  Float
  totalReviewers Int

  about   About  @relation(fields: [aboutId], references: [id], onDelete: Cascade)
  aboutId String @unique
}

model Location {
  id        String  @id @default(uuid())
  continent String
  country   String
  city      String
  subcity   String
  nearby    String?

  guestHouse   GuestHouse @relation(fields: [guestHouseId], references: [id], onDelete: Cascade)
  guestHouseId String     @unique
}

model Room {
  id           String       @id @default(uuid())
  name         String
  roomId       String       @unique
  type         EachRoomType @default(SINGLE)
  price        Int
  description  String
  images       Json // [{url, name}]
  availability Boolean

  square_meters    Int
  max_occupancy    Int
  beds             Json // { single_beds: 1, double_beds: 0, queen_beds: 0, king_beds: 0, sofa_beds: 0, cribs: false }
  living_features  Json // { private_bathroom: true, bathtub: false, shower: true, hairdryer: true, minibar: true, tv: true, streaming_tv: false, wifi_available: true}
  kitchen_features Json // { coffee_maker: true, refrigerator: true, microwave: true }
  accessibility    Json // { wheelchair_accessible:true }
  hygiene_features Json // { sanitizer: true, hygiene_kits: false, digital_keys: false}
  last_updated     DateTime @default(now())

  guestHouse   GuestHouse @relation(fields: [guestHouseId], references: [id], onDelete: Cascade)
  guestHouseId String

  occupiedBy   User?   @relation("OccupiedRooms", fields: [occupiedById], references: [id], onDelete: Cascade)
  occupiedById String?

  Booking Booking[]
}

model Booking {
  id String @id @default(uuid())

  checkIn  DateTime
  checkOut DateTime
  guests   Int
  status   BookingStatus @default(PENDING)

  paymentStatus  PaymentStatus @default(PENDING)
  transactionRef String?
  paymentInfo    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  approvedBy   User?   @relation("ApprovedBookings", fields: [approvedById], references: [id])
  approvedById String?
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum GuestHouseType {
  PRIVATE
  SHARED
}

enum EachRoomType {
  SINGLE
  DOUBLE
  TWIN
  DELUXE
  SUITE
  FAMILY
  STUDIO
  EXECUTIVE
  PRESIDENTIAL
}
