model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions      Session[]
  accounts      Account[]
  occupiedRooms Room[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model GuestHouse {
  id          String   @id @default(uuid())
  name        String
  images      String[]
  description String
  address     String
  facilities  String
  contact     String

  rooms Room[]
}

model Room {
  id           String   @id @default(uuid())
  name         String
  roomId       String   @unique
  type         String
  price        String
  description  String
  images       String[]
  amenities    String[]
  availability String

  guestHouse   GuestHouse @relation(fields: [guestHouseId], references: [id])
  guestHouseId String

  occupiedBy   User?   @relation(fields: [occupiedById], references: [id])
  occupiedById String?
}
